// Code generated by client-gen. DO NOT EDIT.

package fake

import (
	samplecontrollerv1 "github.com/akaimo/sample-controller/pkg/apis/samplecontroller/v1"
	v1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	labels "k8s.io/apimachinery/pkg/labels"
	schema "k8s.io/apimachinery/pkg/runtime/schema"
	types "k8s.io/apimachinery/pkg/types"
	watch "k8s.io/apimachinery/pkg/watch"
	testing "k8s.io/client-go/testing"
)

// FakeSampleResources implements SampleResourceInterface
type FakeSampleResources struct {
	Fake *FakeExampleV1
	ns   string
}

var sampleresourcesResource = schema.GroupVersionResource{Group: "example.com", Version: "v1", Resource: "sampleresources"}

var sampleresourcesKind = schema.GroupVersionKind{Group: "example.com", Version: "v1", Kind: "SampleResource"}

// Get takes name of the sampleResource, and returns the corresponding sampleResource object, and an error if there is any.
func (c *FakeSampleResources) Get(name string, options v1.GetOptions) (result *samplecontrollerv1.SampleResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewGetAction(sampleresourcesResource, c.ns, name), &samplecontrollerv1.SampleResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*samplecontrollerv1.SampleResource), err
}

// List takes label and field selectors, and returns the list of SampleResources that match those selectors.
func (c *FakeSampleResources) List(opts v1.ListOptions) (result *samplecontrollerv1.SampleResourceList, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewListAction(sampleresourcesResource, sampleresourcesKind, c.ns, opts), &samplecontrollerv1.SampleResourceList{})

	if obj == nil {
		return nil, err
	}

	label, _, _ := testing.ExtractFromListOptions(opts)
	if label == nil {
		label = labels.Everything()
	}
	list := &samplecontrollerv1.SampleResourceList{ListMeta: obj.(*samplecontrollerv1.SampleResourceList).ListMeta}
	for _, item := range obj.(*samplecontrollerv1.SampleResourceList).Items {
		if label.Matches(labels.Set(item.Labels)) {
			list.Items = append(list.Items, item)
		}
	}
	return list, err
}

// Watch returns a watch.Interface that watches the requested sampleResources.
func (c *FakeSampleResources) Watch(opts v1.ListOptions) (watch.Interface, error) {
	return c.Fake.
		InvokesWatch(testing.NewWatchAction(sampleresourcesResource, c.ns, opts))

}

// Create takes the representation of a sampleResource and creates it.  Returns the server's representation of the sampleResource, and an error, if there is any.
func (c *FakeSampleResources) Create(sampleResource *samplecontrollerv1.SampleResource) (result *samplecontrollerv1.SampleResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewCreateAction(sampleresourcesResource, c.ns, sampleResource), &samplecontrollerv1.SampleResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*samplecontrollerv1.SampleResource), err
}

// Update takes the representation of a sampleResource and updates it. Returns the server's representation of the sampleResource, and an error, if there is any.
func (c *FakeSampleResources) Update(sampleResource *samplecontrollerv1.SampleResource) (result *samplecontrollerv1.SampleResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewUpdateAction(sampleresourcesResource, c.ns, sampleResource), &samplecontrollerv1.SampleResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*samplecontrollerv1.SampleResource), err
}

// Delete takes name of the sampleResource and deletes it. Returns an error if one occurs.
func (c *FakeSampleResources) Delete(name string, options *v1.DeleteOptions) error {
	_, err := c.Fake.
		Invokes(testing.NewDeleteAction(sampleresourcesResource, c.ns, name), &samplecontrollerv1.SampleResource{})

	return err
}

// DeleteCollection deletes a collection of objects.
func (c *FakeSampleResources) DeleteCollection(options *v1.DeleteOptions, listOptions v1.ListOptions) error {
	action := testing.NewDeleteCollectionAction(sampleresourcesResource, c.ns, listOptions)

	_, err := c.Fake.Invokes(action, &samplecontrollerv1.SampleResourceList{})
	return err
}

// Patch applies the patch and returns the patched sampleResource.
func (c *FakeSampleResources) Patch(name string, pt types.PatchType, data []byte, subresources ...string) (result *samplecontrollerv1.SampleResource, err error) {
	obj, err := c.Fake.
		Invokes(testing.NewPatchSubresourceAction(sampleresourcesResource, c.ns, name, pt, data, subresources...), &samplecontrollerv1.SampleResource{})

	if obj == nil {
		return nil, err
	}
	return obj.(*samplecontrollerv1.SampleResource), err
}
